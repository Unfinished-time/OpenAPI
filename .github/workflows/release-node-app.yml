name: 构建并发布 Node 应用

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-release:
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    name: 构建并打包 (${{ matrix.os }})
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 安装依赖
        run: npm install

      - name: 下载 Node.js 运行时
        run: |
          NODE_VERSION=20.11.1
          case "${{ matrix.os }}" in
            ubuntu-latest)
              OS=linux
              EXT=tar.xz
              ;;
            windows-latest)
              OS=win
              EXT=zip
              ;;
            macos-latest)
              OS=darwin
              EXT=tar.xz
              ;;
          esac
          ARCH=x64
          NODE_DIST=node-v${NODE_VERSION}-${OS}-${ARCH}
          NODE_URL="https://nodejs.org/dist/v${NODE_VERSION}/${NODE_DIST}.${EXT}"
          mkdir -p node_runtime
          cd node_runtime
          curl -O -L $NODE_URL
          if [ "$EXT" = "zip" ]; then
            unzip ${NODE_DIST}.zip
          else
            tar -xf ${NODE_DIST}.tar.xz
          fi
          cd ..

        shell: bash
      - name: 打包应用及 Node.js 运行时
        run: |
          case "${{ matrix.os }}" in
            ubuntu-latest)
              PKG_EXT=tar.gz
              PKG_NAME="OpenAPI_ubuntu.zip"
              printf '#!/bin/bash\n./node-v20.11.1-linux-x64/bin/node index.js' > start.sh && chmod +x start.sh
              ;;
            windows-latest)
              PKG_EXT=zip
              PKG_NAME="OpenAPI_windows.zip"
              printf "@echo off\r\nnode-v20.11.1-win-x64\\node.exe index.js" > start.bat
              ;;
            macos-latest)
              PKG_EXT=tar.gz
              PKG_NAME="OpenAPI_macos.zip"
              printf '#!/bin/bash\n./node-v20.11.1-darwin-x64/bin/node index.js' > start.sh && chmod +x start.sh
              ;;
          esac
          mkdir package
          cp -r node_runtime/* package/
          # 只复制除 package 目录自身以外的内容
          shopt -s extglob
          cp -r !("package"|"node_runtime") package/
          cd package
          eval $START_CMD
          zip -r ../$PKG_NAME .
          cd ..
        shell: bash

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: OpenAPI_${{ matrix.os }}
          path: OpenAPI_*.zip

      - name: 检查是否为版本号提交
        id: version_commit
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_version_commit=true" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
          else
            echo "is_version_commit=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

  release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v') ||
      (needs.build-and-release.outputs.is_version_commit == 'true')
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: 创建 Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/*.*
          name: ${{ github.ref_name || needs.build-and-release.outputs.version }}
          tag_name: ${{ github.ref_name || needs.build-and-release.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}